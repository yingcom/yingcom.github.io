{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/2021-04-23/cli-digital-audio/","result":{"data":{"site":{"siteMetadata":{"title":"Ying Feng Official Website"}},"current":{"excerpt":"Musician likes to experiment with the keys and tempos of musical works. If it's hard to adapt to a new key on accoustic instrument, you can try digital…","html":"<p>Musician likes to experiment with the keys and tempos of musical works. If it's hard to adapt to a new key on accoustic instrument, you can try digital instrument that has built-in transpose function without changing the original way of playing. Sound engineer can raise or lower the pitch of a sound with a pitch shifter in recording, or tranpose the soundtracks in a DAW in post production. For those who are more comfortable with command lines, FFmpeg and SoX are great companions. This article introduces FFmpeg, Rubberband and SoX for audio playback, format conversion, and ultimately adjusting the tempo and pitch of a soudntrack to your taste in the terminal.</p>\n<p>How will the Concerto in D Minor after Marcello (BWV 974) by J.S. Bach sound if it is played in C Minor? Check it out yourself after you finish reading. 😉</p>\n<h1>What is FFmpeg, Rubberband and SoX?</h1>\n<blockquote>\n<p>FFmpeg is the leading multimedia framework, able to decode, encode, transcode, mux, demux, stream, filter and play pretty much anything that humans and machines have created. It supports the most obscure ancient formats up to the cutting edge - <a href=\"https://www.ffmpeg.org/about.html\">https://www.ffmpeg.org/about.html</a></p>\n</blockquote>\n<p>FFmpeg has an large suite of libraries and programs for processing audio, video and other multimedia files and streams. First released in 2000, FFmpeg has been used as a core module for handling multimedia in applications such as YouTube, Chrome, iTunes, VLC player, Handbrake, and Blender, just to name a few. If you are unfamiliar with FFmpeg, check out this <a href=\"https://slhck.info/ffmpeg-encoding-course/\">tutorial</a> for a general introduction.</p>\n<blockquote>\n<p>Rubberband is an audio time-stretching and pitch-shifting library and utility program. It includes a simple (free) command-line utility program that you can use for fixed adjustments to the speed and pitch of existing audio files - <a href=\"https://breakfastquay.com/rubberband/\">https://breakfastquay.com/rubberband/</a></p>\n</blockquote>\n<p>Rubberband is shipped in <code class=\"grvsc-inline-code solarized-light grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"md\" data-index=\"0\"><span class=\"mtk1\"> </span><span class=\"mtk1\">librubberband</span></code> as an audio filter in FFmpeg. It also has a command-line interface independent of FFmpeg. For modifying the tempo or pitch of an andio, Rubberband is far better than low-level manipulation via the <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"1\"><span class=\"mtk1\"> </span><span class=\"mtk1\">aresample</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"2\"><span class=\"mtk1\"> </span><span class=\"mtk1\">atempo</span></code>, or <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"3\"><span class=\"mtk1\"> </span><span class=\"mtk1\">asetrate</span></code> filters in FFmpeg.</p>\n<blockquote>\n<p>SoX (Sound eXchange) is a cross-platform command-line utility for audio manipulation. It can read and apply effects to audio, particularly suited for quick, simple edits and batch processing.</p>\n</blockquote>\n<p>SoX is almost a decade older than FFmpeg. Unlike FFmpeg which has encompassing libraries for both audio and video, SoX focuses on audio processing only. However, it includes most of the tools that you will also find in a DAW.</p>\n<h1>Quality Control with Meta Data and Playback</h1>\n<p>Checking meta data is the first step in quality control. You can extract the meta data of a single audio file with the command <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"4\"><span class=\"mtk1\"> ffprobe </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\">input</span><span class=\"mtk8\">&gt;</span></code> in FFmpeg, or use <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"5\"><span class=\"mtk1\"> soxi </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\">input</span><span class=\"mtk8\">1&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk1\">[</span><span class=\"mtk1\">input2</span><span class=\"mtk1\">]</span><span class=\"mtk1\"> </span><span class=\"mtk1\">[</span><span class=\"mtk1\">input3</span><span class=\"mtk1\">]</span></code> to display information for multiple audio files with SoX.</p>\n<p>SoX only supports audio formats that are not patent-encumbered or of which the patent has expired. For exmple, it can process audio files with an extension of <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"6\"><span class=\"mtk1\">mp3</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"7\"><span class=\"mtk1\">wav</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"8\"><span class=\"mtk1\">aiff</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"9\"><span class=\"mtk1\">flac</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"10\"><span class=\"mtk1\">vorbis</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"11\"><span class=\"mtk1\">opus</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"12\"><span class=\"mtk1\">ogg</span></code>, but cannot read the compatible audio bitstreams inside <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"13\"><span class=\"mtk1\">webm</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"14\"><span class=\"mtk1\">mp4</span></code>, <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"15\"><span class=\"mtk1\">m4a</span></code> or <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"16\"><span class=\"mtk1\">m4b</span></code> containers. For a complete list of the supported audio formats, please refer to the official <a href=\"http://sox.sourceforge.net/soxformat.html\">documentation</a>. For files that cannot be handled by SoX, FFmpeg is here to rescue. It can transcode or transmux (changing containers without re-encoding) almost any audio with decent quality by default.</p>\n<p>Playback is an intuitive way to check for potential problems. Both FFmpeg and Sox allows you to play audio with compatible format in the terminal. FFmpeg ships a <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"17\"><span class=\"mtk1\"> ffplay</span></code> command for multimedia playback. The <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"18\"><span class=\"mtk1\"> -nodisp</span></code> flag is optional if you don't want a graphical display in playback.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffplay input.wav -nodisp</span></span></span></code></pre>\n<p>The playback position can be controlled with a timestamp in <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"19\"><span class=\"mtk1\">[</span><span class=\"mtk1\">HH:</span><span class=\"mtk1\">]</span><span class=\"mtk1\">MM:SS</span><span class=\"mtk1\">[</span><span class=\"mtk1\">.m...</span><span class=\"mtk1\">]</span></code> or <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"20\"><span class=\"mtk1\"> </span><span class=\"mtk1\">[</span><span class=\"mtk1\">-</span><span class=\"mtk1\">]</span><span class=\"mtk1\">S+</span><span class=\"mtk1\">[</span><span class=\"mtk1\">.m...</span><span class=\"mtk1\">]</span><span class=\"mtk1\">[</span><span class=\"mtk1\">s</span><span class=\"mtk8\">|</span><span class=\"mtk1\">ms</span><span class=\"mtk8\">|</span><span class=\"mtk1\">us</span><span class=\"mtk1\">]</span></code> formats. You need to be mindful that FFmpeg doesn't always have an accurate position for playback. The seeking for transcoding is always accurate to the given timestamps though.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffplay input.wav -ss </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">start</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> -t </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">duration</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span></span></span></code></pre>\n<p>SoX comes with a <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"21\"><span class=\"mtk1\"> play</span></code> command for audio playback with no pop-up display. You can control the playback with an optional start via <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"22\"><span class=\"mtk1\"> trim seconds</span></code>, an optional pause or end via <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"23\"><span class=\"mtk1\"> trim =seconds</span></code>. You can even skip to a position measured from the end of a soundtrack via <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"24\"><span class=\"mtk1\"> trim -seconds</span></code>. The <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"25\"><span class=\"mtk1\"> play</span></code> command below basically says that it should play from 00:15 until 00:30, skip the rest with fast foward and resume playing the last 20 seconds till the end. The playback seeking is accurate in SoX.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">play input.wav trim 00:15 =00:30 -20</span></span></span></code></pre>\n<h1>Transcoding and Generation Loss</h1>\n<p>You can convert an audio from one format into another as long as both formats are supported in the tool of your choice. FFmpeg is more suitable for this task thanks to its massive container library (libavformat) and codec library (libavcodec). You can check the supported containers with <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"26\"><span class=\"mtk1\"> ffmpeg -formats</span></code> and the supported codec with <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"27\"><span class=\"mtk1\"> ffmpeg -codecs</span></code>.</p>\n<p>Here are the commands for converting audio formats with SoX and FFmpeg respectively:</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">sox input.wav output.mp3        </span><span class=\"grvsc-tsSx3w-3 grvsc-tiaGIi-3 grvsc-tiaGIi-i\"># format conversion with SoX</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffmpeg -i input.wav output.mp3  </span><span class=\"grvsc-tsSx3w-3 grvsc-tiaGIi-3 grvsc-tiaGIi-i\"># format conversion with FFmpeg</span></span></span></code></pre>\n<p>Generation loss can be introduced in the transcoding process. The above command will re-encode the source audio with the target codec. If you just want to change containers (transmuxing) and the target codec is the same as the source codec, you really should just copy the original codec and avoid re-encoding. You can use the <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"28\"><span class=\"mtk1\"> -c:a copy</span></code> flag, where <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"29\"><span class=\"mtk1\"> -c:a</span></code> means the codec of the audio.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffmpeg -i input.ogg -c:a copy output.webm</span></span></span></code></pre>\n<h1>Changing Tempo</h1>\n<p>You can pick SoX or FFmpeg for changing the tempo of an existing audio file. It is also called time stretching. SoX has a straigh-forward command syntax and a decent quality for the output. FFmpeg has a slightly more complicated syntax, and if used with the right filter, it can produce a slightly better output.</p>\n<p>In SoX you can change the tempo in playback with the command <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"30\"><span class=\"mtk1\"> play </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\">input</span><span class=\"mtk8\">&gt;</span><span class=\"mtk1\"> tempo </span><span class=\"mtk1\">[</span><span class=\"mtk1\">factor</span><span class=\"mtk1\">]</span></code> where <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"31\"><span class=\"mtk1\"> </span><span class=\"mtk1\">factor</span></code> is the ratio of new tempo to the old tempo, so 1.2 speeds up the tempo by 20% and 0.7 slows it down by 30%. Since the <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"32\"><span class=\"mtk1\"> </span><span class=\"mtk1\">tempo</span></code> effect uses the <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"33\"><span class=\"mtk1\"> </span><span class=\"mtk1\">rate</span></code> effect which changes the sampling rate, the audio bitrate drops after conversion and the difference might be perceptible. Use the command below to save a copy.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">sox </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">output</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> tempo 1.2</span></span></span></code></pre>\n<p>An audio filter is required in FFmpeg for changing a soundtrack tempo. You can check the filters library in FFmpeg (libavfilter) via <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"34\"><span class=\"mtk1\"> ffmpeg -filters</span></code>. FFmpeg accepts multiple filters, which can be daisy-chained by comma (see the command syntax below). The <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"35\"><span class=\"mtk1\"> -af</span></code> flag is equivalent to <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"36\"><span class=\"mtk1\"> -filter:a</span></code> for audio filter. Likewise the <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"37\"><span class=\"mtk1\"> -vf</span></code> is a shorthand for <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"38\"><span class=\"mtk1\"> -filter:v</span></code> for video filter. A filter can have multiple parameters with a set of default values. Parameters of a filter are joined by colon.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffmpeg -i </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> -af </span><span class=\"grvsc-tsSx3w-6 grvsc-tiaGIi-11\">&quot;filter1,filter2,filter3&quot;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">output</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffmpeg -i </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> -af </span><span class=\"grvsc-tsSx3w-6 grvsc-tiaGIi-11\">&quot;filter=param1=value1:param2=value2&quot;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">output</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span></span></span></code></pre>\n<p>I tried the <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"39\"><span class=\"mtk1\"> </span><span class=\"mtk1\">atempo</span></code> filter with <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"40\"><span class=\"mtk1\"> ffplay </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\">input</span><span class=\"mtk8\">&gt;</span><span class=\"mtk1\"> -af atempo=1.5</span></code> to increase the tempo by 1.5 times. The audio quality is so miserable that I don't recommend it. Another option is the <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"41\"><span class=\"mtk1\"> </span><span class=\"mtk1\">librubberband</span></code> in FFmpeg, where it uses Rubberband, an dedicated library for time stretching and pitch shifting. Rubberband can be used as an FFmpeg audio filter or an independent command-line utility.</p>\n<p>The playback command via <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"42\"><span class=\"mtk1\"> </span><span class=\"mtk1\">librubberband</span></code> looks like this: <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"43\"><span class=\"mtk1\"> ffplay </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\">input</span><span class=\"mtk8\">&gt;</span><span class=\"mtk1\"> -af rubberband=tempo=1.5</span></code>. You can save a copy of the audio streamed at different playback speed with either command below.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffmpeg -i </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> -af rubberband=tempo=1.5 </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">output</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">rubberband --tempo 1.5 </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">output</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span></span></span></code></pre>\n<p>Rubberband produces the best audio quality. SoX has a decent quality and its command is easy to remember. You probably should avoid the FFmpeg atempo filter at all cost for tempo adjustment.</p>\n<h1>Shifting Pitch</h1>\n<p>SoX has a very good support for shifting pitch with <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"44\"><span class=\"mtk1\"> pitch </span><span class=\"mtk1\">[</span><span class=\"mtk1\">-</span><span class=\"mtk1\">]</span><span class=\"mtk1\">[</span><span class=\"mtk1\">shift</span><span class=\"mtk1\">]</span></code>, where the <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"45\"><span class=\"mtk1\"> </span><span class=\"mtk1\">[</span><span class=\"mtk1\">shift</span><span class=\"mtk1\">]</span></code> indicates a shift value at 100th of a semitone, with a positive or negative sign for the shift direction. The following commands show how to lower the pitch by 2 semitones.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">play </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> pitch -200           </span><span class=\"grvsc-tsSx3w-3 grvsc-tiaGIi-3 grvsc-tiaGIi-i\"># for playback</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">sox </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">output</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> pitch -200   </span><span class=\"grvsc-tsSx3w-3 grvsc-tiaGIi-3 grvsc-tiaGIi-i\"># for conversion</span></span></span></code></pre>\n<p>When it comes to Rubberband, the pitch shifting syntax is somewhat problematic. It depends on whether it's used as a command-line utility program or as an FFmpeg audio filter. Let's look at the command line scenario first.</p>\n<p>According to the <a href=\"https://breakfastquay.com/rubberband/usage.txt\">Rubberband command line utility help guide</a>, which is also available via <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"46\"><span class=\"mtk1\"> rubberband -h</span></code> in the terminal, you can lower the pitch by 2 semitones with the following command, where the <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"47\"><span class=\"mtk1\"> --pitch</span></code> flag is interchangeable with <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"48\"><span class=\"mtk1\"> -p</span></code>.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">rubberband --pitch -2 </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">ouptput</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span></span></span></code></pre>\n<p>If you want to use Rubberband as an FFmpeg audio filter, you need to be careful with the value for the scaled pitch. For instance, this command <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"49\"><span class=\"mtk1\"> ffplay -i </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\">input</span><span class=\"mtk8\">&gt;</span><span class=\"mtk1\"> -af rubberband=pitch=-2</span></code> will throw an out-of-range error, where the value for the pitch should fall somewhere between 0.01 and 100. Since a person normally can hear the sounds between 20 to 20,000 Hz, is this somehow related to the pitch value range in <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"50\"><span class=\"mtk1\"> </span><span class=\"mtk1\">librubberband</span></code>?</p>\n<p>How about changing the command to <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"51\"><span class=\"mtk1\"> ffplay -i </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\">input</span><span class=\"mtk8\">&gt;</span><span class=\"mtk1\"> -af rubberband=pitch=2</span></code>? Will I get a shift of 2 semitones above the original key? It turns out it's one octave higher! Reducing the pitch value to 0.5 will end up with one octave lower than the original key. It's obvious that the pitch parameter in the FFmpeg audio filter is different from the Rubberband command-line utility program. How can I calculate the value for shifting the pitch down by 2 semitones with <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"52\"><span class=\"mtk1\"> ffplay</span></code> then?</p>\n<p>To answer this question, a bit of musical theory is needed. The calculation of a <a href=\"https://en.wikipedia.org/wiki/Semitone\">semitone</a> depends on the tuning system in use. In twelve-tone equal temperament, each semitone is equal to one twelfth of an octave. The ratio of the frequencies between two adjacent octaves is 2:1. The ratio of the frequencies between two adjacent semitones is <a href=\"https://en.wikipedia.org/wiki/Twelfth_root_of_two\">twelfth root of two</a> <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"34.359375\" height=\"35.3125\" style=\"width:34.359375px;height:35.3125px;font-family:Asana-Math, Asana;background:#FFF;\"><g transform=\"matrix(1,0,0,1,2,17.9)\"><path transform=\"matrix(0.0119,0,0,-0.0119,0,0)\" d=\"M418 -3L418 27L366 30C311 33 301 44 301 96L301 700L60 598L67 548L217 614L217 96C217 44 206 33 152 30L96 27L96 -3C250 0 250 0 261 0C292 0 402 -3 418 -3ZM515 23L515 -3C702 -3 702 0 738 0C774 0 774 -3 967 -3L967 82C852 77 806 81 621 77L803 270C900 373 930 428 930 503C930 618 852 689 725 689C653 689 604 669 555 619L538 483L567 483L580 529C596 587 632 612 699 612C785 612 840 558 840 473C840 398 798 324 685 204Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g><g transform=\"matrix(1,0,0,1,19.625,30.3125)\"><path transform=\"matrix(0.017,0,0,-0.017,0,0)\" d=\"M16 23L16 -3C203 -3 203 0 239 0C275 0 275 -3 468 -3L468 82C353 77 307 81 122 77L304 270C401 373 431 428 431 503C431 618 353 689 226 689C154 689 105 669 56 619L39 483L68 483L81 529C97 587 133 612 200 612C286 612 341 558 341 473C341 398 299 324 186 204Z\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g><svg x=\"2.625\" overflow=\"visible\" y=\"11.3125\" height=\"17\" width=\"25.5\"><polygon points=\"0.35,9.89 4.79,7.52 9.67,17.87 16.36,0.00 25.50,0.00 25.50,1.05 17.09,1.05 9.18,22.19 3.10,9.45 0.64,10.37\" style=\"fill:rgb(0,0,0);fill-opacity:1;stroke-width:1px;stroke:none;stroke-opacity:1;\"></polygon></svg><g transform=\"matrix(1,0,0,1,28.125,30.3125)\"><path transform=\"matrix(0.017,0,0,-0.017,0,0)\" d=\"\" stroke=\"rgb(0,0,0)\" stroke-opacity=\"1\" stroke-width=\"8\" fill=\"rgb(0,0,0)\" fill-opacity=\"1\"></path></g></svg>.</p>\n<!--\n12 semitones (1 octave) higher: 2  \n1 semitone higher: 2^(1/12) ≈ 1.0594630944  \n1 semitone lower: 1 / 2^(1/12) ≈ 0.9438743127  \n2 semitones higher: 2^(1/12) * 2^(1/12) ≈ 1.1224620483  \n2 semitones lower: 1 / (2^(1/12) * 2^(1/12)) ≈ 0.8908987181\n-->\n<!--\n12 semitones or 1 octave higher: 2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">12</span>⁄<span class=\"den\">12</span></span></sup> = 2  \n1 semitone higher: 2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">1</span>⁄<span class=\"den\">12</span></span></sup> ≈ 1.0594630944  \n2 semitones higher: 2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">1</span>⁄<span class=\"den\">6</span></span></sup> ≈ 1.1224620483  \n1 semitone lower: 1 ÷ 2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">1</span>⁄<span class=\"den\">12</span></span></sup> ≈ 0.9438743127  \n2 semitones lower: 1 ÷ 2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">1</span>⁄<span class=\"den\">6</span></span></sup> ≈ 0.8908987181  \n12 semitones or 1 octave lower: 1 ÷ 2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">12</span>⁄<span class=\"den\">12</span></span></sup> = 0.5\n-->\n<table>\n<thead>\n<tr>\n<th align=\"left\">Shift distance</th>\n<th align=\"left\">Multiplier</th>\n<th align=\"left\">Ratio</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">+12 semitones</td>\n<td align=\"left\">2 <sup><span class=\"frac\" role=\"math\"><span class=\"num\">12</span>⁄<span class=\"den\">12</span></span></sup></td>\n<td align=\"left\">2</td>\n</tr>\n<tr>\n<td align=\"left\">+2 semitones</td>\n<td align=\"left\">2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">1</span>⁄<span class=\"den\">6</span></span></sup></td>\n<td align=\"left\">1.1224620483</td>\n</tr>\n<tr>\n<td align=\"left\">+1 semitone</td>\n<td align=\"left\">2 <sup><span class=\"frac\" role=\"math\"><span class=\"num\">1</span>⁄<span class=\"den\">12</span></span></sup></td>\n<td align=\"left\">1.0594630944</td>\n</tr>\n<tr>\n<td align=\"left\">base</td>\n<td align=\"left\">2 <sup><span class=\"frac\" role=\"math\"><span class=\"num\">0</span>⁄<span class=\"den\">12</span></span></sup></td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">-1 semitone</td>\n<td align=\"left\">1 ÷ 2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">1</span>⁄<span class=\"den\">12</span></span></sup></td>\n<td align=\"left\">0.9438743127</td>\n</tr>\n<tr>\n<td align=\"left\">-2 semitones</td>\n<td align=\"left\">1 ÷ 2<sup><span class=\"frac\" role=\"math\"><span class=\"num\">1</span>⁄<span class=\"den\">6</span></span></sup></td>\n<td align=\"left\">0.8908987181</td>\n</tr>\n<tr>\n<td align=\"left\">-12 semitones</td>\n<td align=\"left\">1 ÷ 2 <sup><span class=\"frac\" role=\"math\"><span class=\"num\">12</span>⁄<span class=\"den\">12</span></span></sup></td>\n<td align=\"left\">0.5</td>\n</tr>\n</tbody>\n</table>\n<p>If the original key is scaled to 1, the ratio for shifting the pitch down by 2 semitones is 0.8908987181. You can use the Rubberband audio filter in FFmpeg to achieve the transposition.</p>\n<pre class=\"grvsc-container monokai grvsc-ps-tsSx3w grvsc-mm-tiaGIi grvsc-ps-tiaGIi\" data-language=\"sh\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffplay -i </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> -af rubberband=pitch=0.8908987181            </span><span class=\"grvsc-tsSx3w-3 grvsc-tiaGIi-3 grvsc-tiaGIi-i\"># for playback</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-tsSx3w-1 mtk1\">ffmpeg -i </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">input</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\"> -af rubberband=pitch=0.8908987181 </span><span class=\"grvsc-tsSx3w-7 mtk8\">&lt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">ouptput</span><span class=\"grvsc-tsSx3w-7 mtk8\">&gt;</span><span class=\"grvsc-tsSx3w-1 mtk1\">  </span><span class=\"grvsc-tsSx3w-3 grvsc-tiaGIi-3 grvsc-tiaGIi-i\"># for conversion</span></span></span></code></pre>\n<p>The syntaxes for pitch-shifting in SoX and the Rubberband CLI are more musician-friendly than the audio filter in FFmpeg. The audio quality from <code class=\"grvsc-inline-code solarized-light\" data-language=\"md\" data-index=\"53\"><span class=\"mtk1\"> </span><span class=\"mtk1\">librubberband</span></code> in FFmpeg is the least optimal. The Rubberband CLI produces the best audio quality and its syntax makes sense. The only problem is the absence of a playback command similar to the <code class=\"grvsc-inline-code solarized-light\" data-language=\"sh\" data-index=\"54\"><span class=\"mtk1\"> play </span><span class=\"mtk8\">&lt;</span><span class=\"mtk1\">input</span><span class=\"mtk8\">&gt;</span></code> in SoX. Therefore you can use SoX for a convenient playback and the Rubberband CLI for high quality conversion.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .solarized-light { background-color: #FDF6E3; }\n  .solarized-light .grvsc-tiaGIi-i { font-style: italic; }\n  .solarized-light .mtk1 { color: #657B83; }\n  .solarized-light .mtk8 { color: #859900; }\n  .solarized-light .grvsc-tiaGIi-3 { color: #93A1A1; }\n  .solarized-light .grvsc-tiaGIi-11 { color: #2AA198; }\n  .solarized-light .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  .dark .grvsc-ps-tiaGIi { background-color: #FDF6E3; }\n  .dark .grvsc-ps-tiaGIi .grvsc-tiaGIi-i { font-style: italic; }\n  .dark .grvsc-ps-tiaGIi .mtk1 { color: #657B83; }\n  .dark .grvsc-ps-tiaGIi .mtk8 { color: #859900; }\n  .dark .grvsc-ps-tiaGIi .grvsc-tiaGIi-3 { color: #93A1A1; }\n  .dark .grvsc-ps-tiaGIi .grvsc-tiaGIi-11 { color: #2AA198; }\n  .dark .grvsc-ps-tiaGIi .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  \n  /* Solarized Light */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-tiaGIi { background-color: #FDF6E3; }\n    .grvsc-mm-tiaGIi .grvsc-tiaGIi-i { font-style: italic; }\n    .grvsc-mm-tiaGIi .mtk1 { color: #657B83; }\n    .grvsc-mm-tiaGIi .mtk8 { color: #859900; }\n    .grvsc-mm-tiaGIi .grvsc-tiaGIi-3 { color: #93A1A1; }\n    .grvsc-mm-tiaGIi .grvsc-tiaGIi-11 { color: #2AA198; }\n    .grvsc-mm-tiaGIi .grvsc-line-highlighted::before {\n      background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n      box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n    }\n  }\n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .grvsc-tsSx3w-1 { color: #F8F8F2; }\n  .monokai .grvsc-tsSx3w-7 { color: #F92672; }\n  .monokai .grvsc-tsSx3w-3 { color: #75715E; }\n  .monokai .grvsc-tsSx3w-6 { color: #E6DB74; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n  .light .grvsc-ps-tsSx3w {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .light .grvsc-ps-tsSx3w .grvsc-tsSx3w-1 { color: #F8F8F2; }\n  .light .grvsc-ps-tsSx3w .grvsc-tsSx3w-7 { color: #F92672; }\n  .light .grvsc-ps-tsSx3w .grvsc-tsSx3w-3 { color: #75715E; }\n  .light .grvsc-ps-tsSx3w .grvsc-tsSx3w-6 { color: #E6DB74; }\n  .light .grvsc-ps-tsSx3w .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"CLI Tools for Digital Audio","preview":"Use FFmpeg, Rubberband and SoX for time streching and pitch scaling","date":"2021-04-23"},"timeToRead":9},"previous":{"fields":{"slug":"/post/2021-04-10/react-frameworks-for-static-generation/"},"frontmatter":{"title":"React Frameworks for Static Generation"}},"next":null},"pageContext":{"slug":"/post/2021-04-23/cli-digital-audio/","id":"edfb0efa-9f04-55b9-a16f-f730dbc68d8e","previousPostId":"22141824-719e-51e0-a29c-df7b0d43f666","nextPostId":null}},"staticQueryHashes":["634353619"]}